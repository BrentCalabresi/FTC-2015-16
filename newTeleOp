package com.qualcomm.ftcrobotcontroller.opmodes;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.Range;

/**
 * Created by Brent on 9/6/2015.
 * Windows 1252
 */
public class TeleOp extends Robot {
    double FRval;
    double FLval;
    double BRval;
    double BLval;
    double rightarm;
    double leftarm;
    double sweep;

    public double fixRange(double n){
        if (n > 1)
            n = 1;
        if (n < -1)
            n = -1;
        return n;
    }

    /*
    * This method will be called repeatedly in a loop
    *
    * @see com.qualcomm.robotcore.eventloop.opmode.OpMode#run()
    */
    @Override
    public void loop() {

        // throttle: left_stick_y ranges from -1 to 1, where -1 is full up, and
        // 1 is full down
        // direction: left_stick_x ranges from -1 to 1, where -1 is full left
        // and 1 is full right

        double y1 = gamepad1.left_stick_y;
        double x1 = gamepad1.left_stick_x;
        double y2 = -gamepad2.left_stick_y;
        double x2 = gamepad1.right_stick_x;

        //scaleInput(y1);
        //scaleInput(x2);
        if ((gamepad2.right_bumper) || (gamepad1.right_bumper)) {
            rightarm = 1;
            leftarm = 1;
        }

        else if ((gamepad1.right_trigger > .1) || gamepad2.right_trigger > .1) {
            leftarm = -.15;
            rightarm = -.15;
        }
        else{ leftarm = 0;
              rightarm = 0;
        }

        //if (Math.abs(y2) > .05){
         //   sweep = y2;
        //}
        if (gamepad2.left_bumper)
            sweep = .05;
        else if (gamepad2.left_trigger > .1)
            sweep = -.05;
        else sweep = 0;


        if (Math.abs(y1) > .05) {

            BRval = y1;
            BLval = y1;
            FRval = y1;
            FLval = y1;

        }
        else

        if (Math.abs(x2) > .05) {
            FLval = x2;
            BLval = x2;
            FRval = -x2;
            BRval = -x2;
        }

        else {
            FLval = 0;
            FRval = 0;
            BRval = 0;
            BLval = 0;
        }

        // scale the joystick value to make it easier to control
        // the robot more precisely at slower speeds.
        //right = (float)scaleInput(right);
        //left =  (float)scaleInput(left);

        Range.clip(FLval, -1, 1);
        Range.clip(BLval, -1, 1);
        Range.clip(BRval, -1, 1);
        Range.clip(FRval, -1, 1);

        FLval = fixRange(FLval);
        FRval = fixRange(FRval);
        BLval = fixRange(BLval);
        BRval = fixRange(BRval);

        // write the values to the motors
        //FR.setPower(scaleInput(FRval));
        //FL.setPower(scaleInput(FLval));
        //BR.setPower(scaleInput(BRval));
        //BL.setPower(scaleInput(BLval));
        FR.setPower((FRval));
        FL.setPower((FLval));
        BR.setPower((BRval));
        BL.setPower((BLval));
        l_arm.setPower(leftarm);
        r_arm.setPower(rightarm);
        sweeper.setPower(sweep);

        //lower arm
        if (gamepad1.a) {
            FL.setPower(0);
        }
        //raise arm
        if (gamepad1.y) {
        }


        telemetry.addData("Text", "*** Robot Data***");

        telemetry.addData("left tgt pwr", "left front pwr: " + String.format("%.2f", y1));
        telemetry.addData("right tgt pwr", "right front pwr: " + String.format("%.2f", x2));

    }

    @Override
    public void stop() {

    }

    /*
     * This method scales the joystick input so for low joystick values, the
     * scaled value is less than linear.  This is to make it easier to drive
     * the robot more precisely at slower speeds.
     */
    double scaleInput(double dVal)  {
        double[] scaleArray = { 0.0, 0.05, 0.09, 0.10, 0.12, 0.15, 0.18, 0.24,
                0.30, 0.36, 0.43, 0.50, 0.60, 0.72, 0.85, 1.00, 1.00 };

        // get the corresponding index for the scaleInput array.
        int index = (int) (dVal * 16.0);
        if (index < 0) {
            index = -index;
        } else if (index > 16) {
            index = 16;
        }

        double dScale = 0.0;
        if (dVal < 0) {
            dScale = -scaleArray[index];
        } else {
            dScale = scaleArray[index];
        }

        return dScale;

    }

}
